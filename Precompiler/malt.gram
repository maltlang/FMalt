Grammar := load | def | macro | let | use | macro-call

load := st-load | dy-load

st-load := (static-load <module-name>)

dy-load := (dynamic-load <module-name>)

body := let | use | cond | match | lambda | dy-load | macro-call | fun-call

def :=
(fun <function-name> <pattern>
    <body>*)

macro := 
(macro <macro-name> <pattern>
    <body>*)

lambda := (<lam> <pattern> <body>*)

lam := '\' | "lambda"

let :=
(let <pattern> <expr>
    <body>*)
use :=
(use [<value-name> <value-name:close-function>] <expr>
    <body>*)

cond :=
(cond [<expr> <body>*]*)

match :=
(match <expr> [<pattern> <body>*]*)

macro-call :=
(<macro-name> <expr>*)

fun-call :=
(<expr> <expr>*)

pattern := _ | (<pattern> . <pattern>) | <expr>
